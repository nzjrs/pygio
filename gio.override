/* -*- Mode: C; c-basic-offset: 4 -*-
 * pygtk- Python bindings for the GTK toolkit.
 * Copyright (C) 2008  Johan Dahlin
 *
 *   giomodule.c: module wrapping the GIO library
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
modulename gio
%%
import gobject.GObject as PyGObject_Type
%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>
#include <gio/gio.h>

#define BUFSIZE 8192

typedef struct {
    PyObject *callback;
    PyObject *data;
    PyObject *buffer;
} PyGAsyncRequestNotify;

static void
py_decref_callback (gpointer data)
{
    Py_DECREF((PyObject*)data);
}

static void
async_result_callback_marshal(GObject *source_object, 
			      GAsyncResult *result, 
			      PyGAsyncRequestNotify *notify)
{
    PyObject *ret;
    PyGILState_STATE state;
    static GQuark quark = 0;
    
    state = pyg_gil_state_ensure();

    if (!quark)
	quark = g_quark_from_string("pygio::buffer");
    Py_INCREF(notify->buffer);
    g_object_set_qdata_full(G_OBJECT(result), quark,
			    notify->buffer, py_decref_callback);

    if (notify->data)
	ret = PyEval_CallFunction(notify->callback, "(OOO)", 
				  pygobject_new(source_object), 
				  pygobject_new((GObject *)result),
				  notify->data);
    else
	ret = PyObject_CallFunction(notify->callback, "(OO)", 
				    pygobject_new(source_object), 
				    pygobject_new((GObject *)result));

    if (ret == NULL)
      {
	PyErr_Print();
	PyErr_Clear();
      }

    Py_XDECREF(ret);

    Py_DECREF(notify->callback);
    Py_XDECREF(notify->data);
    g_slice_free(PyGAsyncRequestNotify, notify);

    pyg_gil_state_release(state);
}
%%
include
  ginputstream.override
  goutputstream.override
  gvolumemonitor.override
%%
ignore-glob
  *_get_type
  *free
%%
override g_drive_get_volumes noargs
static PyObject *
_wrap_g_drive_get_volumes (PyGObject *self)
{
  GList *list, *l;
  PyObject *ret;
  
  list = g_drive_get_volumes (G_DRIVE (self->obj));

  ret = PyList_New(0);
  for (l = list; l; l = l->next) {
    GVolume *volume = l->data;
    PyObject *item = pygobject_new((GObject *)volume);
    PyList_Append(ret, item);
    Py_DECREF(item);
  }
  g_list_free(list);
  
  return ret;
}
%%
override g_app_info_get_all noargs
static PyObject *
_wrap_g_app_info_get_all (PyGObject *self)
{
  GList *list, *l;
  PyObject *ret;
  
  list = g_app_info_get_all ();

  ret = PyList_New(0);
  for (l = list; l; l = l->next) {
    GObject *obj = l->data;
    PyObject *item = pygobject_new(obj);
    PyList_Append(ret, item);
    Py_DECREF(item);
  }
  g_list_free(list);
  
  return ret;
}
%%
override g_app_info_get_all_for_type args
static PyObject *
_wrap_g_app_info_get_all_for_type (PyGObject *self, PyObject *args)
{
  GList *list, *l;
  PyObject *ret;
  gchar *type;
  
  if (!PyArg_ParseTuple (args, "s:app_info_get_all_for_type", &type))
    return NULL;
  
  list = g_app_info_get_all_for_type (type);

  ret = PyList_New(0);
  for (l = list; l; l = l->next) {
    GObject *obj = l->data;
    PyObject *item = pygobject_new(obj);
    PyList_Append(ret, item);
    Py_DECREF(item);
  }
  g_list_free(list);
  
  return ret;
}
%%
define GSimpleAsyncResult.get_buffer noargs 
static PyObject *
_wrap_g_simple_async_result_get_buffer(PyGObject *self)
{
    static GQuark quark = 0;
    PyObject *buffer;

    if (!quark)
	quark = g_quark_from_string("pygio::buffer");

    buffer = g_object_get_qdata(G_OBJECT(self->obj), quark);

    Py_INCREF(buffer);
    return buffer;
}
