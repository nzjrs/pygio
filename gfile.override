/* -*- Mode: C; c-basic-offset: 4 -*-
 * pygobject - Python bindings for GObject
 * Copyright (C) 2008  Johan Dahlin
 *
 *   gfile.override: module overrides for GInputStream
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
override g_file_read_async kwargs
static PyObject *
_wrap_g_file_read_async(PyGObject *self, PyObject *args, PyObject *kwargs)
{
  static char *kwlist[] = { "io_priority", "cancellable", "callback",
                            "user_data", NULL };
  int io_priority = G_PRIORITY_DEFAULT;
  PyGObject *pycancellable;
  GCancellable *cancellable;
  PyGAsyncRequestNotify *notify;
  
  notify = g_slice_new0(PyGAsyncRequestNotify);

  if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                   "iOO|O:InputStream.read_async",
                                   kwlist,
                                   &io_priority,
                                   &pycancellable,
                                   &notify->callback,
                                   &notify->data))
    {
      g_slice_free(PyGAsyncRequestNotify, notify);
      return NULL;
    }

  if ((PyObject*)pycancellable == Py_None)
    cancellable = NULL;
  else if (pygobject_check(pycancellable, &PyGCancellable_Type))
      cancellable = G_CANCELLABLE(pycancellable->obj);
  else
    {
      PyErr_SetString(PyExc_TypeError, "cancellable should be a gio.Cancellable");
      return NULL;
    }

  if (!PyCallable_Check(notify->callback))
    {
      PyErr_SetString(PyExc_TypeError, "callback argument not callable");
      g_slice_free(PyGAsyncRequestNotify, notify);
      return NULL;
    }
  Py_INCREF(notify->callback);
  Py_XINCREF(notify->data);
  
  g_file_read_async(G_FILE(self->obj),
                    io_priority,
                    cancellable,
                    (GAsyncReadyCallback)async_result_callback_marshal,
                    notify);
  
  Py_INCREF(Py_None);
  return Py_None;
}
